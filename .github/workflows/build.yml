name: Build Gusto

on:
  # Push to main or PR
  push:
    branches:
      - main
  pull_request:
  schedule:
    # * is a special character in YAML so you have to quote this string
    # Scheduled build at 0330 UTC on Monday mornings to detect bitrot.
    - cron:  '30 3 * * 1'

concurrency:
  # Cancels jobs running if new commits are pushed
  group: >
    ${{ github.workflow }}-
    ${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: "Build Gusto"
    # The type of runner that the job will run on
    runs-on: [self-hosted, Linux]
    # The docker container to use.
    container:
      # TODO
      # image: firedrakeproject/firedrake-vanilla-default:latest
      image: firedrakeproject/firedrake-vanilla-default:pip
    env:
      GUSTO_PARALLEL_LOG: FILE
      PYOP2_CFLAGS: -O0
      # Make sure that tests with >4 processes are not silently skipped
      PYTEST_MPI_MAX_NPROCS: 4
      EXTRA_PYTEST_ARGS: --durations=100 --timeout=3600 --timeout-method=thread -o faulthandler_timeout=3660 --verbose gusto-repo/unit-tests gusto-repo/integration-tests gusto-repo/examples
    steps:
      # TODO: This can be removed when the image is updated
      - name: Extend PATH
        run: echo "/home/firedrake/.local/bin" >> "$GITHUB_PATH"

      - name: Fix HOME
        # For unknown reasons GitHub actions overwrite HOME to /github/home
        # which will break everything unless fixed
        # (https://github.com/actions/runner/issues/863)
        run: echo "HOME=/home/firedrake" >> $GITHUB_ENV

      - name: Pre-cleanup
        run: |
          : # Wipe everything away in the current directory
          find . -delete
          firedrake-clean

      - uses: actions/checkout@v4
        with:
          path: gusto-repo

      - name: Create virtual environment
        # pass --system-site-packages so Firedrake can be found
        run: python -m venv --system-site-packages venv-gusto

      - name: Install Gusto
        run: |
          . venv-gusto/bin/activate
          pip install ./gusto-repo
          : # Extra test dependencies
          sudo apt-get update
          sudo apt-get install -y parallel
          pip install pytest-split pytest-timeout pytest-xdist
          pip list

      - name: Test serial-only netCDF
        run: |
          . venv-gusto/bin/activate
          python -m pytest -n 3 -v integration-tests/model/test_nc_outputting.py
        timeout-minutes: 10

      - name: Install parallel netCDF
        id: install
        run: |
          . venv-gusto/bin/activate
          pip uninstall -y netCDF4
          # FIXME: unsure if this is needed
          # export HDF5_DIR=$PETSC_DIR/packages
          export NETCDF4_DIR=$PETSC_DIR/$PETSC_ARCH
          pip install --no-binary netCDF4 --no-build-isolation netCDF4

      - name: Run tests (nprocs = 1)
        run: |
          . venv-gusto/bin/activate
          : # Use pytest-xdist here so we can have a single collated output (not possible
          : # for parallel tests)
          firedrake-run-split-tests 1 1 "-n 12 --dist worksteal $EXTRA_PYTEST_ARGS"
        # TODO: adjust once we know how long each stage takes
        timeout-minutes: 120

      - name: Run tests (nprocs = 2)
        # Run even if earlier tests failed
        if: success() || steps.install.conclusion == 'success'
        run: |
          . venv-gusto/bin/activate
          firedrake-run-split-tests 2 6 "$EXTRA_PYTEST_ARGS"
        # TODO: adjust once we know how long each stage takes
        timeout-minutes: 120

      - name: Run tests (nprocs = 3)
        if: success() || steps.install.conclusion == 'success'
        run: |
          . venv-gusto/bin/activate
          firedrake-run-split-tests 3 4 "$EXTRA_PYTEST_ARGS"
        # TODO: adjust once we know how long each stage takes
        timeout-minutes: 120

      - name: Run tests (nprocs = 4)
        if: success() || steps.install.conclusion == 'success'
        run: |
          . venv-gusto/bin/activate
          firedrake-run-split-tests 4 3 "$EXTRA_PYTEST_ARGS"
        # TODO: adjust once we know how long each stage takes
        timeout-minutes: 120

      - name: Prepare logs
        if: success() || steps.install.conclusion == 'success'
        id: prepare-logs
        run: |
          mkdir logs
          cd /tmp/pytest-of-firedrake/pytest-0/
          find . -name "*.log" -exec cp --parents {} /__w/gusto/gusto/logs/ \;

      - name: Upload artifact
        if: success() || steps.prepare-logs.conclusion == 'success'
        uses: actions/upload-pages-artifact@v3
        with:
          name: log-files
          path: /__w/gusto/gusto/logs
          retention-days: 5

      - name: Post-cleanup
        if: always()
        run: |
          find . -delete
          firedrake-clean
